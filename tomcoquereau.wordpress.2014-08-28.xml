<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.9.2" created="2014-08-28 12:47" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Tom Coquereau</title>
	<link>http://thau.me</link>
	<description>front-end developer · Paris</description>
	<pubDate>Thu, 28 Aug 2014 12:47:24 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://thau.me</wp:base_site_url>
	<wp:base_blog_url>http://thau.me</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>thaumeSylvere</wp:author_login><wp:author_email>tom.coquereau@gmail.com</wp:author_email><wp:author_display_name><![CDATA[Tom Coquereau]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>13</wp:term_id><wp:category_nicename>css-2</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[CSS]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>22</wp:term_id><wp:category_nicename>ember-data-2</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Ember-Data]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>15</wp:term_id><wp:category_nicename>emberjs</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[EmberJS]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>14</wp:term_id><wp:category_nicename>es6</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[ES6]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>23</wp:term_id><wp:category_nicename>nodejs</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[NodeJS]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>5</wp:term_id><wp:category_nicename>projects</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Projects]]></wp:cat_name><wp:category_description><![CDATA[From personal to freelance projects]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>18</wp:term_id><wp:category_nicename>seo</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[SEO]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>11</wp:term_id><wp:tag_slug>animations</wp:tag_slug><wp:tag_name><![CDATA[animations]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>27</wp:term_id><wp:tag_slug>aws</wp:tag_slug><wp:tag_name><![CDATA[aws]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>7</wp:term_id><wp:tag_slug>css</wp:tag_slug><wp:tag_name><![CDATA[css]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>21</wp:term_id><wp:tag_slug>ember</wp:tag_slug><wp:tag_name><![CDATA[ember]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>20</wp:term_id><wp:tag_slug>ember-data</wp:tag_slug><wp:tag_name><![CDATA[ember-data]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>17</wp:term_id><wp:tag_slug>emberjs-2</wp:tag_slug><wp:tag_name><![CDATA[emberjs]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>16</wp:term_id><wp:tag_slug>es6-2</wp:tag_slug><wp:tag_name><![CDATA[es6]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>9</wp:term_id><wp:tag_slug>grunt</wp:tag_slug><wp:tag_name><![CDATA[grunt]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>12</wp:term_id><wp:tag_slug>html5-api</wp:tag_slug><wp:tag_name><![CDATA[html5 api]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>25</wp:term_id><wp:tag_slug>nodejs-2</wp:tag_slug><wp:tag_name><![CDATA[nodejs]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>28</wp:term_id><wp:tag_slug>s3</wp:tag_slug><wp:tag_name><![CDATA[S3]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>6</wp:term_id><wp:tag_slug>sass</wp:tag_slug><wp:tag_name><![CDATA[sass]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>19</wp:term_id><wp:tag_slug>seo-2</wp:tag_slug><wp:tag_name><![CDATA[seo]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>26</wp:term_id><wp:tag_slug>streams</wp:tag_slug><wp:tag_name><![CDATA[streams]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>8</wp:term_id><wp:tag_slug>workflow</wp:tag_slug><wp:tag_name><![CDATA[workflow]]></wp:tag_name></wp:tag>
	<wp:term><wp:term_id>3</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug>none</wp:term_slug><wp:term_name><![CDATA[none]]></wp:term_name></wp:term>
	<wp:term><wp:term_id>4</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug>main</wp:term_slug><wp:term_name><![CDATA[main]]></wp:term_name></wp:term>

	<generator>http://wordpress.org/?v=3.9.2</generator>

	<item>
				<title>Hi. I&#039;m Tom</title>
		<link>http://thau.me/about/</link>
		<pubDate>Tue, 28 May 2013 17:17:51 +0000</pubDate>
		<dc:creator><![CDATA[thaumeSylvere]]></dc:creator>
		<guid isPermaLink="false">http://thau.me/?page_id=16</guid>
		<description></description>
		<content:encoded><![CDATA[My name is Tom Coquereau, I work as a front-end architect at <a href="http://viadeo.com">viadeo</a> in Paris. My job was to create a new NodeJS stack for our middle-end, now that it is done I spend my time helping developers get the best from this new platform.

This is my personal blog. I write here, mostly about front-end stuffs, to engage with the developer community.

You can find me on <a title="tom's twitter" href="https://twitter.com/thaume">twitter</a>, <a title="tom's github" href="https://github.com/thaume">github</a> and <a title="tom's google+" href="https://plus.google.com/+TomCoquereau">google+</a> !]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date>2013-05-28 17:17:51</wp:post_date>
		<wp:post_date_gmt>2013-05-28 17:17:51</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[template-full-width.php]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_title</wp:meta_key>
			<wp:meta_value><![CDATA[Hi. I'm Tom Coquereau]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_description</wp:meta_key>
			<wp:meta_value><![CDATA[My name is Tom Coquereau, I work as a front-end developer at viadeo.com in Paris.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[Tom Coquereau, front-end developer, web developer, paris, france]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_robots_index</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_robots_follow</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Home</title>
		<link>http://thau.me/2013/05/home/</link>
		<pubDate>Tue, 28 May 2013 17:18:19 +0000</pubDate>
		<dc:creator><![CDATA[thaumeSylvere]]></dc:creator>
		<guid isPermaLink="false">http://thau.me/?p=18</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date>2013-05-28 17:18:19</wp:post_date>
		<wp:post_date_gmt>2013-05-28 17:18:19</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>home</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="main"><![CDATA[main]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[18]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[http://thau.me/]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Entering the world of SASSC and bourbon for a real project</title>
		<link>http://thau.me/2013/11/entering-the-world-of-sassc-and-bourbon-for-a-real-project/</link>
		<pubDate>Tue, 05 Nov 2013 19:36:18 +0000</pubDate>
		<dc:creator><![CDATA[thaumeSylvere]]></dc:creator>
		<guid isPermaLink="false">http://thau.me/?p=31</guid>
		<description></description>
		<content:encoded><![CDATA[<!--more-->We are all starting to 'build' our front-end resources. Some of us pre-compile Handlebars templates, some minify images and I even heard that some deal with <a title="cache-busting" href="https://github.com/jgallen23/grunt-hash">cache-busting</a>. We run all of those tasks thanks to this amazing tool called 'Grunt' that keeps on revolutionizing the front-end way of building websites.

Of course we both want to run these build tasks and use livereload to design in the browser. For a nice developer-experience, it needs to run <strong>fast</strong>.

Most of these tasks are okay in terms of speed, but when your Sass/Compass project reaches 4000 lines, you start to have performance issues (at the compile step and not in the css generated, this is another story).

I reached those 4000 lines of code on a project I was working on earlier this year. It took around 5 seconds to compile the scss files with compass. One of the guy working with me on the project (<a title="Damian twitter" href="https://twitter.com/damln">@damln</a>) told me about this new Sass built with C, it sounded really sassy.

At that point, I met <a title="Libsass on github" href="https://github.com/hcatlin/libsass">Libsass</a> (it's a good guy)

<a title="libsass website" href="http://libsass.org/"><img class="size-full wp-image-38 aligncenter" alt="libsass-logo" src="http://thau.me/wp-content/uploads/2013/11/libsass-logo.png" width="320" height="160" /></a>
<h2>Enter libsass and Bourbon</h2>
I then started a complete re-factoring of the code using Bourbon as my 'mixins-provider' and building the scss with Libsass wrapped in a grunt-task (<a title="grunt-sass on github" href="https://github.com/sindresorhus/grunt-sass">grunt-sass</a>, and not grunt-contrib-sass which is based on the ruby version). The good thing about Bourbon is that their mixins are w3c compliant (something not absolutely true in compass) and they drop support for vendor-prefix at a good pace depending on each feature, your css is cleaner and up to date !

Dropping Compass for Bourbon was already a big win, the scss compile time went from 5 sec to around 2 sec.
<h3>So how does that look like ?</h3>
Compilation with <strong>sass</strong> without compass (the ruby version) :

<a href="http://thau.me/wp-content/uploads/2013/11/sass_compile.png"><img class="alignnone size-full wp-image-71" alt="sass_compile" src="http://thau.me/wp-content/uploads/2013/11/sass_compile.png" width="563" height="20" /></a>

Compilation with <strong>sassc</strong> (the C version) :

<img class="alignnone size-full wp-image-72" alt="sassc_compile" src="http://thau.me/wp-content/uploads/2013/11/sassc_compile.png" width="562" height="20" />

We came from 2290 ms to 288 ms ! This is a <strong>huge</strong> win for people who love to design in the browser.
<h3>What about the cons ?</h3>
<blockquote><strong>Update 01/03/2014</strong>

Libsass now supports sourcemaps</blockquote>
If you look around in the github repos of libsass, grunt-sass or node-sass, you will find out that some features are missing or partially implemented. For instance, you won't be able to take advantage of the nested @extend rules <a title="nested @extend issue thread" href="https://github.com/hcatlin/libsass/issues/159">yet</a> (the single class @extend works thought), sourcemaps are in the <a title="Source map support thread" href="https://github.com/hcatlin/libsass/issues/122%23issuecomment-21885955">pipe</a> but not there yet either.

Considering that, I never really had a blocking problem with libsass and it is 100% compatible with bourbon and <a title="bootstrap-sass on github" href="https://github.com/thomas-mcdonald/bootstrap-sass">bootstrap-sass</a>. You sometimes might have to use some tricks to compile some old properties like this one : [prism key="old-syntax-css" language="scss"]

You will get all the assistance you need on the issue thread of the github repo dealing with libsass.
<h2>Hold your breath and...</h2>
Try libsass ! Installing the binaries is pretty easy (explanations <a title="sassc on github" href="https://github.com/hcatlin/sassc">here</a>) and you can just try it with the grunt task : [prism key="npm-install-code" language="bash"]

and then add the task to your project gruntfile, like in this example : <a title="grunt-sass example" href="https://github.com/thaume/sassc-test">grunt-sass example</a>

There are some rumors in the wild talking about a real-time reload <a title="takana on beta" href="http://usetakana.com/">tool</a> too, you should give it a shot !

The roadmap of libsass is moving toward a 1:1 equivalence with the ruby version, and it is already looking pretty good, using libsass is something really refreshing !
<blockquote>Thanks <a title="Damian twitter" href="https://twitter.com/damln">@damln</a> for <a title="Dam's libsass article" href="http://www.damln.com/log/sassc-and-bourbon-it-works/" target="_blank">sharing your knowledge on libsass</a> ;)

<a title="geeksters web agency" href="http://geeksters.co">geeksters.co</a></blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[Quick intro to Libsass, the C powered SASS wrapper]]></excerpt:encoded>
		<wp:post_id>31</wp:post_id>
		<wp:post_date>2013-11-05 19:36:18</wp:post_date>
		<wp:post_date_gmt>2013-11-05 19:36:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>entering-the-world-of-sassc-and-bourbon-for-a-real-project</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="css"><![CDATA[css]]></category>
		<category domain="category" nicename="css-2"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="grunt"><![CDATA[grunt]]></category>
		<category domain="post_tag" nicename="sass"><![CDATA[sass]]></category>
		<category domain="post_tag" nicename="workflow"><![CDATA[workflow]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_image_ids</wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_quote_quote</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_link_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_m4v</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_ogv</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_poster_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_embed_code</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_mp3</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_ogg</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_poster_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_title</wp:meta_key>
			<wp:meta_value><![CDATA[Intro to Libsass and bourbon, the C powered SASS wrapper]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_description</wp:meta_key>
			<wp:meta_value><![CDATA[Sass can be slow sometimes, in this article we are looking at an alternative to the classic sass/compass]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[Sass performance, grunt, grunt-sass, node-sass, libsass, bourbon, workflow]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_robots_index</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_robots_follow</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1942312692]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>npm-install-code</wp:meta_key>
			<wp:meta_value><![CDATA[npm install grunt-sass]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>old-syntax-css</wp:meta_key>
			<wp:meta_value><![CDATA[.identifiant {
  filter: alpha(opacity=50);
}

/* To make the compilation pass */
.identifiant {
  filter: unquote("alpha(opacity=50);");
}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[81]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>16</wp:comment_id>
			<wp:comment_author><![CDATA[Codekit 2.0 ファーストインプレッション | Sou-Lablog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.sou-lab.com/codekit2/</wp:comment_author_url>
			<wp:comment_author_IP>112.78.219.213</wp:comment_author_IP>
			<wp:comment_date>2014-03-06 00:56:16</wp:comment_date>
			<wp:comment_date_gmt>2014-03-05 23:56:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 通常はRubyでコンパイルするSassをC++でコンパイルすることで速いらしい。しかしまだ完全に機能しないそうで、アルファ機能扱いだそうです。10倍くらい速くなるとかどうとか。とりあえずコンパイルはできたけど詳しくは未検証。 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1394063777.1707301;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1394364634.0720401;s:7:"message";s:52:"thaumeSylvere changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:13:"thaumeSylvere";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>libsass-logo</title>
		<link>http://thau.me/2013/11/entering-the-world-of-sassc-and-bourbon-for-a-real-project/libsass-logo/</link>
		<pubDate>Tue, 05 Nov 2013 18:33:13 +0000</pubDate>
		<dc:creator><![CDATA[thaumeSylvere]]></dc:creator>
		<guid isPermaLink="false">http://thau.me/wp-content/uploads/2013/11/libsass-logo.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>38</wp:post_id>
		<wp:post_date>2013-11-05 18:33:13</wp:post_date>
		<wp:post_date_gmt>2013-11-05 18:33:13</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>libsass-logo</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>31</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://thau.me/wp-content/uploads/2013/11/libsass-logo.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/11/libsass-logo.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:320;s:6:"height";i:160;s:4:"file";s:24:"2013/11/libsass-logo.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:24:"libsass-logo-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:10:"No savings";}s:6:"medium";a:5:{s:4:"file";s:24:"libsass-logo-300x150.png";s:5:"width";i:300;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:10:"No savings";}s:14:"post-thumbnail";a:5:{s:4:"file";s:22:"libsass-logo-50x50.png";s:5:"width";i:50;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:10:"No savings";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:29:"Reduced by 8.0% (1.6&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>sass_compile</title>
		<link>http://thau.me/2013/11/entering-the-world-of-sassc-and-bourbon-for-a-real-project/sass_compile/</link>
		<pubDate>Wed, 06 Nov 2013 18:17:55 +0000</pubDate>
		<dc:creator><![CDATA[thaumeSylvere]]></dc:creator>
		<guid isPermaLink="false">http://thau.me/wp-content/uploads/2013/11/sass_compile.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>71</wp:post_id>
		<wp:post_date>2013-11-06 18:17:55</wp:post_date>
		<wp:post_date_gmt>2013-11-06 18:17:55</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sass_compile</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>31</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://thau.me/wp-content/uploads/2013/11/sass_compile.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/11/sass_compile.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:563;s:6:"height";i:20;s:4:"file";s:24:"2013/11/sass_compile.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:23:"sass_compile-150x20.png";s:5:"width";i:150;s:6:"height";i:20;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:10:"No savings";}s:6:"medium";a:5:{s:4:"file";s:23:"sass_compile-300x10.png";s:5:"width";i:300;s:6:"height";i:10;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:10:"No savings";}s:14:"post-thumbnail";a:5:{s:4:"file";s:22:"sass_compile-50x20.png";s:5:"width";i:50;s:6:"height";i:20;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:29:"Reduced by 5.8% (80.0&nbsp;B)";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:33:"Reduced by 20.2% (1,006.0&nbsp;B)";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>sassc_compile</title>
		<link>http://thau.me/2013/11/entering-the-world-of-sassc-and-bourbon-for-a-real-project/sassc_compile/</link>
		<pubDate>Wed, 06 Nov 2013 18:17:55 +0000</pubDate>
		<dc:creator><![CDATA[thaumeSylvere]]></dc:creator>
		<guid isPermaLink="false">http://thau.me/wp-content/uploads/2013/11/sassc_compile.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>72</wp:post_id>
		<wp:post_date>2013-11-06 18:17:55</wp:post_date>
		<wp:post_date_gmt>2013-11-06 18:17:55</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sassc_compile</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>31</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://thau.me/wp-content/uploads/2013/11/sassc_compile.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/11/sassc_compile.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:562;s:6:"height";i:20;s:4:"file";s:25:"2013/11/sassc_compile.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:24:"sassc_compile-150x20.png";s:5:"width";i:150;s:6:"height";i:20;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:10:"No savings";}s:6:"medium";a:5:{s:4:"file";s:24:"sassc_compile-300x10.png";s:5:"width";i:300;s:6:"height";i:10;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:10:"No savings";}s:14:"post-thumbnail";a:5:{s:4:"file";s:23:"sassc_compile-50x20.png";s:5:"width";i:50;s:6:"height";i:20;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:29:"Reduced by 2.5% (25.0&nbsp;B)";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:31:"Reduced by 19.4% (949.0&nbsp;B)";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>libsass-logo</title>
		<link>http://thau.me/2013/11/entering-the-world-of-sassc-and-bourbon-for-a-real-project/libsass-logo-2/</link>
		<pubDate>Wed, 06 Nov 2013 22:25:04 +0000</pubDate>
		<dc:creator><![CDATA[thaumeSylvere]]></dc:creator>
		<guid isPermaLink="false">http://thau.me/wp-content/uploads/2013/11/libsass-logo.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date>2013-11-06 22:25:04</wp:post_date>
		<wp:post_date_gmt>2013-11-06 22:25:04</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>libsass-logo-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>31</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://thau.me/wp-content/uploads/2013/11/libsass-logo.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/11/libsass-logo.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:320;s:6:"height";i:160;s:4:"file";s:24:"2013/11/libsass-logo.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:24:"libsass-logo-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:10:"No savings";}s:6:"medium";a:5:{s:4:"file";s:24:"libsass-logo-300x150.jpg";s:5:"width";i:300;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:29:"Reduced by 0.7% (55.0&nbsp;B)";}s:14:"post-thumbnail";a:5:{s:4:"file";s:22:"libsass-logo-50x50.jpg";s:5:"width";i:50;s:6:"height";i:50;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:10:"No savings";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:29:"Reduced by 0.4% (27.0&nbsp;B)";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>ES6 modules and EmberJS : a taste of the future (part 1)</title>
		<link>http://thau.me/2013/12/es6-modules-and-emberjs-a-taste-of-the-future-part-1/</link>
		<pubDate>Tue, 03 Dec 2013 23:19:54 +0000</pubDate>
		<dc:creator><![CDATA[thaumeSylvere]]></dc:creator>
		<guid isPermaLink="false">http://thau.me/?p=94</guid>
		<description></description>
		<content:encoded><![CDATA[These two articles blog post series is a little walk alongside ES6 modules and EmberJS. We'll try some simple ES6 modules examples in the first part and then focus on how EmberJS is eventually getting real modules. (A minimal understanding of EmberJS might be required for part2).
<ul>
	<li><a title="ES6 modules and EmberJS : a taste of the future (part 1)" href="http://thau.me/2013/12/es6-modules-and-emberjs-a-taste-of-the-future-part-1/">ES6 modules and EmberJS : a taste of the future (part 1)</a></li>
	<li><a title="ES6 modules and EmberJS : a taste of the future (part 2)" href="http://thau.me/2013/12/es6-modules-and-emberjs-a-taste-of-the-future-part-2/">ES6 modules and EmberJS : a taste of the future (part 2)</a></li>
</ul>
<h2>import { module } from 'es6/spec';</h2>
The ES.current as we know it doesn't feature a standardized module system, you cannot require some fragment of code inside another fragment of code and use it while being inside a namespace (and not a global). AMD and CommonJS came along and proposed two impressive yet incompatible solutions to let developers use modules (AMD is mostly used in the browser, while CommonJS is more used server-side). The new ES6 modules spec aims at solving this module problem and also let ES6 modules transpile to both AMD and CommonJS as a polyfill.

The ES6 modules spec is <a title="ES6 spec is done" href="https://speakerdeck.com/dherman/status-report-es6-modules">done</a> and will not change before the ES6 specs release, we can now use it and feel safe about the new semantic we learn.
<blockquote>But hey, what about Chrome31 ?</blockquote>
Fragmentation is our job, that's for sure ! ES6 modules do not work in any browser as of today but AMD works everywhere and ES6 transpiler do transpile to AMD. That's the cool news about ES6 modules : there is already a lot of cool tool that enable us to transpile ES6 modules into AMD/requireJS and use it in the browser !
<h2>Enter ES6 modules</h2>
To be able to import some code, you'll first need to export it so that it becomes available for the import commands. Let's start with a simple module structured that way :

[prism key="es6-mod-import-folders" language="markup"]
<h3>export</h3>
Remember that only the file's path matters when you want to import a fragment of code somewhere, you'll understand that with the following examples. You can directly import a function that way:

[prism key="es6-mod-import-direct" language="javascript"]

Note that we exported a function and a variable, but all the variables in the file are accessible from within the file: the <code class=" language-javascript"><span class="token tag">let willNotBeExported</span></code> variable is still accessible inside the function.

You can also perform the same export at the end of your file, it is the same thing really :

[prism key="es6-mod-import-deffered" language="javascript"]

We now have a <code class=" language-javascript"><span class="token tag">let prefixConf</span></code> variable and a <code class=" language-javascript" style="font-size: 13px; line-height: 19px;"><span class="token tag">function prefix(){...}</span></code> exported.
<h3>import</h3>
Let's import our module from lib/prefix into our main.js and use our prefix function from within tasks/main.js :

[prism key="es6-mod-import-import" language="javascript"]

With the module system, I can now use functions defined somewhere else without putting everything in a global scope, this really helps to create better code.
<h3>export default</h3>
In the following EmberJs examples, we'll use the simple <code class=" language-markup"><span class="token tag">export default</span></code> way of exporting modules. It is almost the same as what we saw just before, the only difference being that you can only import one entity from the module. It goes like this:

[prism key="es6-mod-import-default" language="javascript"]

When importing an export default, you do not need to use the braces :

[prism key="es6-mod-import-default-import" language="javascript"]

You can find the code on my github account <a title="es6 modules transpiling code" href="https://github.com/thaume/es6-modules-experiment">here</a>.

That information should be enough for the next part: the Ember App-Kit ES6 module powered app !
<ul>
	<li><a title="ES6 modules and EmberJS : a taste of the future (part 1)" href="http://thau.me/2013/12/es6-modules-and-emberjs-a-taste-of-the-future-part-1/">ES6 modules and EmberJS : a taste of the future (part 1)</a></li>
	<li><a title="ES6 modules and EmberJS : a taste of the future (part 2)" href="http://thau.me/2013/12/es6-modules-and-emberjs-a-taste-of-the-future-part-2/">ES6 modules and EmberJS : a taste of the future (part 2)</a></li>
</ul>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[A quick walk throught the fresh ES6 modules spec coupled with the front MVC framework EmberJS ]]></excerpt:encoded>
		<wp:post_id>94</wp:post_id>
		<wp:post_date>2013-12-04 00:19:54</wp:post_date>
		<wp:post_date_gmt>2013-12-03 23:19:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>es6-modules-and-emberjs-a-taste-of-the-future-part-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="emberjs"><![CDATA[EmberJS]]></category>
		<category domain="post_tag" nicename="emberjs-2"><![CDATA[emberjs]]></category>
		<category domain="category" nicename="es6"><![CDATA[ES6]]></category>
		<category domain="post_tag" nicename="es6-2"><![CDATA[es6]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_image_ids</wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_quote_quote</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_link_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_m4v</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_ogv</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_poster_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_embed_code</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_mp3</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_ogg</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_poster_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_title</wp:meta_key>
			<wp:meta_value><![CDATA[ES6 modules and EmberJS : a taste of the future]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_description</wp:meta_key>
			<wp:meta_value><![CDATA[A quick walk throught the fresh ES6 modules spec coupled with the front MVC framework EmberJS ]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[es6, es6 modules, emberjs, ember, ember js, emberjs modules, future of javascript]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_robots_index</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_robots_follow</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>users-app-structure</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>users-app-route</wp:meta_key>
			<wp:meta_value><![CDATA[export default Ember.Route.extend({
  model: function() {
    return ['John', 'Paul', 'Tom'];
  }
});

// you could also write
var UsersRoute = Ember.Route.extend({
  model: function() {
    return ['John', 'Paul', 'Tom'];
  }
});

export default UsersRoute;]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[2023991549]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>users-app-router</wp:meta_key>
			<wp:meta_value><![CDATA[var Router = Ember.Router.extend();

Router.map(function() {
  this.resource('users');
});

export default Router;]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>users-app-template</wp:meta_key>
			<wp:meta_value><![CDATA[<h2>List of users</h2>
<ul>
{{#each}}
  <li>{{this}}</li>
{{/each}}
</ul>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>users-app-appjs</wp:meta_key>
			<wp:meta_value><![CDATA[import Resolver from 'resolver';

var App = Ember.Application.extend({
  LOG_ACTIVE_GENERATION: true,
  LOG_MODULE_RESOLVER: true,
  LOG_TRANSITIONS: true,
  LOG_TRANSITIONS_INTERNAL: true,
  LOG_VIEW_LOOKUPS: true,
  modulePrefix: 'appkit',
  Resolver: Resolver['default']
});

Ember.RSVP.configure('onerror', function(error) {
  // ensure unhandled promises raise awareness.
  // may result in false negatives, but visibility is more important
  if (error instanceof Error) {
    Ember.Logger.assert(false, error);
    Ember.Logger.error(error.stack);
  }
});

export default App;]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[121]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>es6-mod-import-direct</wp:meta_key>
			<wp:meta_value><![CDATA[// tasks/lib/prefix.js
let willNotBeExported = 'xyz';
export function prefix(x) {
    return prefixConf + x;
}
export let prefixConf = 'app-';]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>es6-mod-import-deffered</wp:meta_key>
			<wp:meta_value><![CDATA[// tasks/lib/prefix.js
let willNotBeExported = 143;
function prefix(x) {
    return prefixConf + x;
}
let prefixConf = 'app-';

export { prefix, prefixConf };]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>es6-mod-import-folders</wp:meta_key>
			<wp:meta_value><![CDATA[tasks/
    lib/
        prefix.js
    main.js]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>es6-mod-import-import</wp:meta_key>
			<wp:meta_value><![CDATA[// tasks/main.js
import { prefix } from 'lib/prefix';
console.log( prefix('users-model') );
// The function will prefix 'users-model' with 'app-'
// => app-users-model]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>es6-mod-import-default</wp:meta_key>
			<wp:meta_value><![CDATA[// tasks/lib/prefix.js
let willNotBeExported = 143;
function prefix(x) {
    return prefixConf + x;
}
let prefixConf = 'app-';

export default prefix;]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>es6-mod-import-default-import</wp:meta_key>
			<wp:meta_value><![CDATA[// tasks/main.js
import prefix from 'lib/prefix';
console.log( prefix('users-model') );
// The function will prefix 'users-model' with 'app-'
// => app-users-model]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1</wp:comment_id>
			<wp:comment_author><![CDATA[James H.]]></wp:comment_author>
			<wp:comment_author_email>james.herdman@me.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>135.23.103.115</wp:comment_author_IP>
			<wp:comment_date>2013-12-06 04:31:00</wp:comment_date>
			<wp:comment_date_gmt>2013-12-06 03:31:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[FYI "That’s the cool news about ES6 modules : their is..." should be "That’s the cool news about ES6 modules : there is..."]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1152453277]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Tom Coquereau]]></wp:comment_author>
			<wp:comment_author_email>tom@thau.me</wp:comment_author_email>
			<wp:comment_author_url>http://thau.me/</wp:comment_author_url>
			<wp:comment_author_IP>78.227.37.166</wp:comment_author_IP>
			<wp:comment_date>2013-12-06 08:55:00</wp:comment_date>
			<wp:comment_date_gmt>2013-12-06 07:55:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks, I just made the update ;)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1152453277]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1152597626]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[ES6 modules and EmberJS : a taste of the future...]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.scoop.it/t/develop/p/4012253056/2013/12/06/es6-modules-and-emberjs-a-taste-of-the-future</wp:comment_author_url>
			<wp:comment_author_IP>89.30.105.121</wp:comment_author_IP>
			<wp:comment_date>2013-12-06 11:52:57</wp:comment_date>
			<wp:comment_date_gmt>2013-12-06 10:52:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] A quick walk throught the fresh ES6 modules spec coupled with the front MVC framework EmberJS&nbsp; [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[true]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1386327177.4317739;s:7:"message";s:35:"Akismet caught this comment as spam";s:5:"event";s:10:"check-spam";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1387041902.781112;s:7:"message";s:47:"thaumeSylvere reported this comment as not spam";s:5:"event";s:10:"report-ham";s:4:"user";s:13:"thaumeSylvere";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user</wp:meta_key>
				<wp:meta_value><![CDATA[thaumeSylvere]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1387041913.024122;s:7:"message";s:52:"thaumeSylvere changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:13:"thaumeSylvere";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[ES6 modules and EmberJS : a taste of the future...]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.scoop.it/t/javascript-for-line-of-business-applications/p/4012254873/2013/12/06/es6-modules-and-emberjs-a-taste-of-the-future</wp:comment_author_url>
			<wp:comment_author_IP>89.30.105.121</wp:comment_author_IP>
			<wp:comment_date>2013-12-06 12:57:41</wp:comment_date>
			<wp:comment_date_gmt>2013-12-06 11:57:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] A quick walk throught the fresh ES6 modules spec coupled with the front MVC framework EmberJS.The ES.current as we know it doesn&rsquo;t feature a standardized module system, you cannot require some fragment of code inside another fragment of code and use it while being inside a namespace (and not a global). AMD and CommonJS came along and proposed two impressive yet incompatible solutions to let developers use modules (AMD is mostly used in the browser, while CommonJS is more used server-side). The new ES6 modules spec aims at solving this module problem and also let ES6 modules transpile to both AMD and CommonJS as a polyfill.The ES6 modules spec is done and will not change before the ES6 specs release, we can now use it and feel safe about the new semantic we learn.&nbsp; [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[true]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1386331061.7464681;s:7:"message";s:35:"Akismet caught this comment as spam";s:5:"event";s:10:"check-spam";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1387041902.1990499;s:7:"message";s:47:"thaumeSylvere reported this comment as not spam";s:5:"event";s:10:"report-ham";s:4:"user";s:13:"thaumeSylvere";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user</wp:meta_key>
				<wp:meta_value><![CDATA[thaumeSylvere]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1387041912.989377;s:7:"message";s:52:"thaumeSylvere changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:13:"thaumeSylvere";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[The Mighty Quinn]]></wp:comment_author>
			<wp:comment_author_email>quinn@themightyquinn.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>38.122.7.254</wp:comment_author_IP>
			<wp:comment_date>2013-12-11 21:25:00</wp:comment_date>
			<wp:comment_date_gmt>2013-12-11 20:25:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[While we are correcting grammar:

-Those- That information should be enough for the next part: the Ember App-Kit ES6 module powered app !]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1152453277]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1159147003]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[EmberJS, ES6 modules and Ember-Data]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://thau.me/2014/01/nodejs-emberjs-es6-modules-and-ember-data/</wp:comment_author_url>
			<wp:comment_author_IP>217.70.180.225</wp:comment_author_IP>
			<wp:comment_date>2014-01-12 13:42:22</wp:comment_date>
			<wp:comment_date_gmt>2014-01-12 12:42:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] this blog post about EmberJS and Ember-Data, we&#8217;ll use the example from the last blog post series (you can find it in this git repo on the branch master) and we&#8217;ll plug in the RESTAdapter in [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1389530542.9369581;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1389565985.2829051;s:7:"message";s:52:"thaumeSylvere changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:13:"thaumeSylvere";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>ember-structure-sm</title>
		<link>http://thau.me/2013/12/es6-modules-and-emberjs-a-taste-of-the-future-part-1/ember-structure-sm/</link>
		<pubDate>Wed, 04 Dec 2013 00:14:55 +0000</pubDate>
		<dc:creator><![CDATA[thaumeSylvere]]></dc:creator>
		<guid isPermaLink="false">http://thau.me/wp-content/uploads/2013/12/ember-structure-sm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>119</wp:post_id>
		<wp:post_date>2013-12-04 01:14:55</wp:post_date>
		<wp:post_date_gmt>2013-12-04 00:14:55</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ember-structure-sm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>94</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://thau.me/wp-content/uploads/2013/12/ember-structure-sm.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/12/ember-structure-sm.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:193;s:6:"height";i:184;s:4:"file";s:30:"2013/12/ember-structure-sm.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:30:"ember-structure-sm-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:30:"Reduced by 2.4% (471.0&nbsp;B)";}s:14:"post-thumbnail";a:5:{s:4:"file";s:28:"ember-structure-sm-50x50.png";s:5:"width";i:50;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:10:"No savings";}s:10:"blog-large";a:5:{s:4:"file";s:30:"ember-structure-sm-193x183.png";s:5:"width";i:193;s:6:"height";i:183;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:28:"Reduced by 0.0% (2.0&nbsp;B)";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:10:"No savings";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>0cf15665a9146ba852bf042b0652780a</title>
		<link>http://thau.me/2013/12/es6-modules-and-emberjs-a-taste-of-the-future-part-1/0cf15665a9146ba852bf042b0652780a/</link>
		<pubDate>Wed, 04 Dec 2013 00:16:17 +0000</pubDate>
		<dc:creator><![CDATA[thaumeSylvere]]></dc:creator>
		<guid isPermaLink="false">http://thau.me/wp-content/uploads/2013/12/0cf15665a9146ba852bf042b0652780a.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date>2013-12-04 01:16:17</wp:post_date>
		<wp:post_date_gmt>2013-12-04 00:16:17</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>0cf15665a9146ba852bf042b0652780a</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>94</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://thau.me/wp-content/uploads/2013/12/0cf15665a9146ba852bf042b0652780a.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/12/0cf15665a9146ba852bf042b0652780a.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:200;s:6:"height";i:200;s:4:"file";s:44:"2013/12/0cf15665a9146ba852bf042b0652780a.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:44:"0cf15665a9146ba852bf042b0652780a-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:10:"No savings";}s:14:"post-thumbnail";a:5:{s:4:"file";s:42:"0cf15665a9146ba852bf042b0652780a-50x50.png";s:5:"width";i:50;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:10:"No savings";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:30:"Reduced by 13.9% (5.3&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>ES6 modules and EmberJS : a taste of the future (part 2)</title>
		<link>http://thau.me/2013/12/es6-modules-and-emberjs-a-taste-of-the-future-part-2/</link>
		<pubDate>Thu, 12 Dec 2013 00:29:52 +0000</pubDate>
		<dc:creator><![CDATA[thaumeSylvere]]></dc:creator>
		<guid isPermaLink="false">http://thau.me/?p=133</guid>
		<description></description>
		<content:encoded><![CDATA[EmberJS does not have a built-in module system per-se and the community is now pushing toward ES6 modules as the standard for creating applications with EmberJS.

<a href="http://thau.me/wp-content/uploads/2013/12/ember-structure-sm.png"><img class="aligncenter" alt="ember-structure-sm" src="http://thau.me/wp-content/uploads/2013/12/ember-structure-sm.png" width="193" height="184" /></a>

I've been looking at the Ember App Kit (EAK) for a couple of weeks now, and I'm solving big problems with it ! Both in terms of productivity and scalability. Creating AMD modules with Ember's conventions becomes a breeze to write thanks to the Resolver shipped with EAK. You first need to understand how things work, how files make sense together... but once you'll get that, you'll start to love it.

For instance your route <code class="language-markup"><span class="token tag">routes/users.js</span></code> will know to use the controller in <code class="language-markup"><span class="token tag">controllers/users.js</span></code> and the template in <code class="language-markup"><span class="token tag">templates/users.hbs</span></code>. You might want to manually add a model somewhere, you can use an <code class="language-javascript"><span class="token tag">import</span></code> statement to get the job done !
<h2>Nuff' talk ! Gimme some code !</h2>
All right, all right, we'll implement the "Mailbox" example from the EmberJS website using ES6 modules, sounds good ? Keep reading ;) Clone the git <a href="https://github.com/thaume/emberjs-es6-modules/tree/ember-es6-1">repo</a> and follow me !

Here is the structure we'll need (for the <strong>app/</strong> folder) :

[prism key="application-structure" language="markup"]

Simple right ? Well that's enough to get the party startin' ! Keep in mind that for ES6 modules, only the paths matters : what you were used to name 'UsersRoute.js' will become 'route/users.js'.
<h2>The router</h2>
The router is the heart of our application, here is how it looks with ES6 modules :

[prism key="application-router" language="javascript"]

We declare a local variable Router (local in the module) and then export it to make it reachable as a module. We declared two routes :
<ol>
	<li>"mailbox", resolving to /:mailbox_id</li>
	<li>"mail", resolving to /:message_id</li>
</ol>
The dynamic parts of the URL will be the different filters that we will apply to display the mails (inbox, spam, sent mail).
<h2>The routes</h2>
We need to define a behavior for the routes we just mapped to our Router, for that we'll need :
<ol>
	<li>The application route callback : [prism key="application-route" language="javascript"]</li>
	<li>The mail route callback :  [prism key="application-mail-route" language="javascript"]</li>
</ol>
We need to import the model 'mailbox' to be able to query all the messages in the application route, but we can use the <code class="language-javascript"><span class="token tag">modelFor('mailbox');</span></code> method in the mail route to use the model of mailbox which was imported as context in the <code class="language-markup"><span class="token tag">{{#link-to}}</span></code> as you'll see later in the application.hbs, mailbox.hbs templates.
<h2>The model</h2>
In the application route, we had to import the model Mailbox in order to query all the messages of our mailbox. Here is the model :

[prism key="application-model" language="javascript"]

Here we created an object model that will give the data to the route. We've been able to import this model in the application route thanks to the <code class="language-javascript"><span class="token tag">export default Mailbox</span></code>. I didn't wanted to display the FIXTURES but you'll find them in the repo I gave you at the beginning of the article.
<h2>Templates</h2>
<strong>application.hbs:</strong> The first template that will be rendered is application.hbs, on the root URL <code class="language-markup"><span class="token tag">/</span></code> . Ember will automatically link the template to the route based on names, and application.hbs + index.hbs come as the "default frame" when you kickstart an application :

[prism key="application-hbs-application" language="markup"]

<strong>index.hbs:</strong> Then Ember will request the index.hbs template and will render it in the {{outlet}} of application.hbs:

[prism key="application-hbs-index" language="markup"]

<strong>mailbox.hbs: </strong>Once you'll click on either 'inbox', 'spam' or 'sent mail' (links that will be displayed in the {{#link-to}} area in application.hbs), the mailbox.hbs template will be called and displayed in the outlet of application.hbs :

[prism key="application-hbs-mailbox" language="markup"]

<strong>mailbox/index.hbs: </strong>The mailbox/index.hbs template will be rendered as the default template in the {{outlet}} of mailbox.hbs

[prism key="application-hbs-mailbox-index" language="markup"]

<strong>mail.hbs: </strong>And then, once you'll click on one of those mails you've received, the mail.hbs template will be rendered and populated with the mail's data

[prism key="application-hbs-mail" language="markup"]

The templates are processed by the grunt task <code class="language-markup"><span class="token tag">grunt-ember-template</span></code>, you should not have to worry about that, just use the classic Ember's conventions names for your templates (just remember to switch to a pathname style convention).

We now have everything we need to kickstart our app, let's write the <code class="language-markup"><span class="token tag">app.js</span></code> and unleash Ember !
<h2>App.js</h2>
Our app.js file is the entry point of our application, where we create the application and launch the Resolver (all the LOG_* are for debug purpose):

[prism key="application-app" language="javascript"]

Once all your modules are exported, they will go throught the Resolver and will be given the place they should have : the router, the routes, the templates, the helpers... It is all (almost) magical and forces you to be idiomatic in many ways (You will not be able to call a global controller in a template, you'll have to make things clean).

<strong>One last thing: </strong>for now, you'll need to call explicitely the app.js default method in your index.html :

[prism key="application-call-ember" language="markup"]

The last thing you need to do now is to run <code class="language-bash"><span class="token tag">grunt server</span></code> in your terminal (from the root of the <a title="ES6 modules and ember js" href="https://github.com/thaume/emberjs-es6-modules">git you cloned</a>), and let the Ember App Kit drive you throught ES6 modules transpiled to AMD inside of your browser, have fun !

I want a <a title="emberjs and es6 demo" href="http://thau.me/demo/emberjs-es6/">DEMO LINK</a> !
<blockquote>
<ul>
	<li><a title="ES6 modules and EmberJS : a taste of the future (part 1)" href="http://thau.me/2013/12/es6-modules-and-emberjs-a-taste-of-the-future-part-1/">ES6 modules and EmberJS : a taste of the future (part 1)</a></li>
	<li><a title="ES6 modules and EmberJS : a taste of the future (part 2)" href="http://thau.me/2013/12/es6-modules-and-emberjs-a-taste-of-the-future-part-2/">ES6 modules and EmberJS : a taste of the future (part 2)</a></li>
</ul>
</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[Building of the "Mailbox" EmberJS application with ES6 modules]]></excerpt:encoded>
		<wp:post_id>133</wp:post_id>
		<wp:post_date>2013-12-12 01:29:52</wp:post_date>
		<wp:post_date_gmt>2013-12-12 00:29:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>es6-modules-and-emberjs-a-taste-of-the-future-part-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="emberjs"><![CDATA[EmberJS]]></category>
		<category domain="post_tag" nicename="emberjs-2"><![CDATA[emberjs]]></category>
		<category domain="category" nicename="es6"><![CDATA[ES6]]></category>
		<category domain="post_tag" nicename="es6-2"><![CDATA[es6]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_image_ids</wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_quote_quote</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_link_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_m4v</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_ogv</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_poster_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_embed_code</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_mp3</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_ogg</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_poster_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_title</wp:meta_key>
			<wp:meta_value><![CDATA[ES6 modules and EmberJS : a taste of the future (part 2)]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_description</wp:meta_key>
			<wp:meta_value><![CDATA[Second part of the two blog post series, we are now dealing with a real EmberJS application and see how it works with ES6 modules]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[Ember, Ember js, EmberJS, ES6 modules, Ember modules]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_robots_index</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_robots_follow</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[121]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>application-structure</wp:meta_key>
			<wp:meta_value><![CDATA[app /
|---- app.js
|---- router.js
|---- helpers /
|-------- mail-date.js
|---- models /
|-------- mailbox.js
|---- routes /
|-------- application.js
|-------- mail.js
|---- templates /
|-------- application.hbs
|-------- index.hbs
|-------- mail.hbs
|-------- mailbox.hbs
|-------- maibox /
|------------ index.hbs]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>application-router</wp:meta_key>
			<wp:meta_value><![CDATA[var Router = Ember.Router.extend(); // ensure we don't share routes between all Router instances

Router.map(function() {
  this.resource('mailbox', { path: '/:mailbox_id' }, function() {
    this.resource('mail', { path: '/:message_id' });
  });
});

export default Router;]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>application-route</wp:meta_key>
			<wp:meta_value><![CDATA[import Mailbox from 'appkit/models/mailbox';

var ApplicationRoute = Em.Route.extend({
  model: function() {
    return Mailbox.find();
  }
});

export default ApplicationRoute;]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>application-model</wp:meta_key>
			<wp:meta_value><![CDATA[var Mailbox = Em.Object.extend();

Mailbox.reopenClass({
  find: function(id) {
    if (id) {
      return FIXTURES.findBy('id', id);
    } else {
      return FIXTURES;
    }
  }
});

export default Mailbox;

var FIXTURES = [
  ...
];]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>application-mail-route</wp:meta_key>
			<wp:meta_value><![CDATA[var MailRoute = Em.Route.extend({
  model: function(params) {
    return this.modelFor('mailbox').messages.findBy('id', params.message_id);
  }
});

export default MailRoute;]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>application-app</wp:meta_key>
			<wp:meta_value><![CDATA[import Resolver from 'resolver';

var App = Ember.Application.extend({
  LOG_ACTIVE_GENERATION: true,
  LOG_MODULE_RESOLVER: true,
  LOG_TRANSITIONS: true,
  LOG_TRANSITIONS_INTERNAL: true,
  LOG_VIEW_LOOKUPS: true,
  modulePrefix: 'appkit',
  Resolver: Resolver['default'],
  rootElement: "#target"
});

Ember.RSVP.configure('onerror', function(error) {
  if (error instanceof Error) {
    Ember.Logger.assert(false, error);
    Ember.Logger.error(error.stack);
  }
});

export default App;]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>application-hbs-application</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="url">URL: {{target.url}}</div>
<aside>
    <ul>
        <li><h2>Mailboxes</h2></li>
        {{#each}}
            <li>
                {{#link-to "mailbox" this currentWhen="mailbox"}}
                    <span class="count">
                        {{messages.length}}
                    </span>
                    {{name}}
                {{/link-to}}
            </li>
        {{/each}}
    </ul>
</aside>

<section class="main">
    {{outlet}}
</section>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>application-hbs-index</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="index">
  <h1>TomsterMail</h1>
  <span class="tomster"></span>
</div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>application-hbs-mail</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="mail">
  <dl>
      <dt>From</dt>
      <dd>{{from}}</dd>
      <dt>To</dt>
      <dd>{{to}}</dd>
      <dt>Date</dt>
      <dd>{{mail-date date}}</dd>
  </dl>
  <h4>{{subject}}</h4>
  <p>{{body}}</p>
</div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>application-hbs-mailbox</wp:meta_key>
			<wp:meta_value><![CDATA[<table>
    <tr>
        <th>Date</th>
        <th>Subject</th>
        <th>From</th>
        <th>To</th>
    </tr>

    {{#each messages}}
        {{#link-to "mail" this tagName='tr'}}
            <td>{{mail-date date}}</td>
            <td>{{view.isActive}}{{subject}}</td>
            <td>{{from}}</td>
            <td>{{to}}</td>
        {{/link-to}}
        </tr>
    {{/each}}
</table>

{{outlet}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>application-hbs-mailbox-index</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="mailbox-index">
  Select an email
</div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>application-call-ember</wp:meta_key>
			<wp:meta_value><![CDATA[<script>window.App = require('appkit/app')["default"].create();</script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[2044730150]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[Ilya Radchenko]]></wp:comment_author>
			<wp:comment_author_email>ilya@burstcreations.com</wp:comment_author_email>
			<wp:comment_author_url>http://burstcreations.com</wp:comment_author_url>
			<wp:comment_author_IP>96.253.32.41</wp:comment_author_IP>
			<wp:comment_date>2013-12-22 14:48:00</wp:comment_date>
			<wp:comment_date_gmt>2013-12-22 13:48:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[What about importing ED models? How would that work, since Ember uses the `store` to access those?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1173594696]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8</wp:comment_id>
			<wp:comment_author><![CDATA[Tom Coquereau]]></wp:comment_author>
			<wp:comment_author_email>tom@thau.me</wp:comment_author_email>
			<wp:comment_author_url>http://thau.me/</wp:comment_author_url>
			<wp:comment_author_IP>88.189.106.35</wp:comment_author_IP>
			<wp:comment_date>2013-12-23 16:48:00</wp:comment_date>
			<wp:comment_date_gmt>2013-12-23 15:48:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well I'm not sure what is the most idiomatic way of achieving that. My next article will be about ED and EAK with complex API responses, but right now I haven't investigated enough on how you could import ED models and use them from within a route or a controller.

Based from http://discuss.emberjs.com/t/model-not-found-ember-app-kit/2888, it seems you just need to import the model in the module's scope and then use this.store.findAll('IMPORTED_MODEL_NAME'). I think EAK resolves all models and make them available inside route and controller through the store.

Let me know if that works for you ! I will also investigate and let you know if I find anything better ;)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>7</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1173594696]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1174710037]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[Balint Erdi]]></wp:comment_author>
			<wp:comment_author_email>balint.erdi@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://codigoergosum.com</wp:comment_author_url>
			<wp:comment_author_IP>46.107.206.243</wp:comment_author_IP>
			<wp:comment_date>2014-01-09 21:07:00</wp:comment_date>
			<wp:comment_date_gmt>2014-01-09 20:07:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It works the same way as everything else in EAK. In `app/models/mailbox.js` you define your Mailbox model and export it, just as in the ED-less example above.

One slight difference is in the way you define your fixtures. If you assigned your model to a var called `Mailbox` then you would do Mailbox.FIXTURES and EAK automatically picks them up.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>7</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1173594696]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1194111867]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15</wp:comment_id>
			<wp:comment_author><![CDATA[ES6 modules and EmberJS : a taste of the future...]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.scoop.it/t/develop/p/4014443172/2014/01/19/es6-modules-and-emberjs-a-taste-of-the-future-part-2</wp:comment_author_url>
			<wp:comment_author_IP>89.30.105.121</wp:comment_author_IP>
			<wp:comment_date>2014-01-19 18:23:12</wp:comment_date>
			<wp:comment_date_gmt>2014-01-19 17:23:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] EmberJS does not have a built-in module system per-se and the community is now pushing toward ES6 modules as the standard for creating applications with EmberJS.&nbsp; [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1390152192.6150751;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>About</title>
		<link>http://thau.me/2013/12/about/</link>
		<pubDate>Sat, 14 Dec 2013 08:52:27 +0000</pubDate>
		<dc:creator><![CDATA[thaumeSylvere]]></dc:creator>
		<guid isPermaLink="false">http://thau.me/?p=215</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>215</wp:post_id>
		<wp:post_date>2013-12-14 09:52:27</wp:post_date>
		<wp:post_date_gmt>2013-12-14 08:52:27</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="main"><![CDATA[main]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>NodeJS, EmberJS, ES6 modules and Ember-Data</title>
		<link>http://thau.me/2014/01/nodejs-emberjs-es6-modules-and-ember-data/</link>
		<pubDate>Wed, 08 Jan 2014 13:12:53 +0000</pubDate>
		<dc:creator><![CDATA[thaumeSylvere]]></dc:creator>
		<guid isPermaLink="false">http://thau.me/?p=217</guid>
		<description></description>
		<content:encoded><![CDATA[In this blog post about EmberJS and Ember-Data, we'll use the example from the <a title="ES6 modules and EmberJS : a taste of the future (part 1)" href="http://thau.me/2013/12/es6-modules-and-emberjs-a-taste-of-the-future-part-1/">last blog post series</a> (you can find it <a title="emberjs and es6 modules" href="https://github.com/thaume/emberjs-es6-modules">in this git repo</a> on the branch master) and we'll plug in the RESTAdapter in order to get data from an Express server instead of using fixtures. Clone the git repo, and follow me !

<img class="aligncenter size-full wp-image-220" alt="tomster-under-construction" src="http://thau.me/wp-content/uploads/2014/01/tomster-under-construction.png" width="472" height="529" />
<h2>Getting the RESTAdapter to work</h2>
The Ember App Kit has a very useful little feature called 'API-stub', it let you create routes on Express and respond with data. We will use this API-stub to create our JSON that we want to send to our Ember app through Ember-Data, so let's configure our ApplicationAdapter, you will find here : <code class="language-markup"><span class="token tag">app/adapters/application.js</span></code>

[prism key="application-adapter" language="javascript"]

As simple as that, our RESTAdapter is now configured to work with our Express server.
<h3>Setup the API response in NodeJS</h3>
The Express server also needs to be configured so that it can talk with our Ember-App. We will send a JSON when it gets a GET request on <code class="language-markup"><span class="token tag">localhost:8000/api/mailboxes</span></code> (Ember-Data does automatic pluralization on ressources name),  the Express routes handler file is here <code class="language-markup"><span class="token tag">api-stub/routes.js</span></code> and here is what you need to do :

[prism key="application-nodejs-routes" language="javascript"]

The JSON that we will send back is just the JSON Fixtures we used with the FixturesAdapter but it needs a little bit of rework to work with Ember-Data.
<h2>Formatting/normalizing your data</h2>
Ember-Data expects a particular type of data format, you need to normalize your data and use 'foreign keys' the same way you would with a relational database. Our JSON fixtures looked like that :

[prism key="application-fixtures-json" language="javascript"]

In order to be Ember-Data ready, we will have to move our messages into another object called 'messages' and give them an ID to inject them back in our mailboxes, it goes like this :

[prism key="application-normalizing-messages" language="javascript"]

The mailbox part will look like that :

[prism key="application-normalizing-mailbox" language="javascript"]

As you can see, the mailbox JSON has a 'messages' attribute that is an array filled with numbers. Those numbers are the 'foreign keys' that will enable us to attach referenced messages into each mailbox. If a mailbox has a 'messages' attribute equal to <code class="language-javascript"><span class="token tag">["1", "2"]</span></code> then the messages with IDs "1" and "2" will be attached to this mailbox once the data reaches Ember. We can now merge those two JSON into <code class="language-javascript"><span class="token tag">var data</span></code> and send it over to Ember-Data once an ajax call is made to our Express server on the mailboxes route.
<h2>Creating the Ember Models</h2>
We need to define two models, one for each ressource ('message' and 'mailbox') in order to define their structures.
<h3>Message model</h3>
The message model will be pretty straightforward, we will just copy/paste the JSON attributes and set them as DS.attr(). We could define a type for each attributes like <code class="language-javascript"><span class="token tag">DS.attr('string')</span></code> or <code class="language-javascript"><span class="token tag">DS.attr('date')</span></code> but for the purpose of this example, it is unecessary.

[prism key="application-message-model" language="javascript"]

As you can see, the "id" attribute became "number", this is due to the fact that ember will not let you name a model's attribute ID. Instead you will need to create an idField for the model and set the attributes that should be the ID. In this example, "number" is the "id" of the model.
<h3>Mailbox model</h3>
The mailbox model will be slightly trickier since we need to define a 'relationship' with the message model. The 'mailbox' can have one or more 'messages' so the relationship will be <code class="language-javascript"><span class="token tag">hasMany</span></code> 'message'. It looks like that :

[prism key="application-mailbox-model" language="javascript"]

This <code class="language-javascript"><span class="token tag">hasMany</span></code> relationship tells Ember-Data that when a mailbox model is loaded, it also needs to fetch the messages for which the ID is inside the messages array and then populate this messages array with the actual messages.
<h2>The Application route</h2>
Now that our model is able to fetch data from our Express server, we need to inject this data inside the views. We will use the 'model' hook of the ApplicationRoute to do that :

[prism key="application-route-model" language="javascript"]

We ask Ember-Data throught the <code class="language-javascript"><span class="token tag">store</span></code> object to find all the mailbox objects. Under the hood, Ember will make an ajax call to the route <code class="language-markup"><span class="token tag">localhost:8000/api/mailboxes</span></code> and get a JSON from this URL. You do not need to import models into your ApplicationRoute module, Ember will automatically find models in the folder model when you look for them with the store. Once again, conventions make the whole process a breeze.

The last thing you need to do now is to run <code>grunt server</code> in your terminal, and see if everything is working !

You can find the code used in this article in <a href="https://github.com/thaume/emberjs-es6-modules/tree/ember-es6-ember-data">this git repo</a> on the branch 'ember-es6-ember-data'.]]></content:encoded>
		<excerpt:encoded><![CDATA[Putting the ‘mailbox' example on steroïds with Ember-Data]]></excerpt:encoded>
		<wp:post_id>217</wp:post_id>
		<wp:post_date>2014-01-08 14:12:53</wp:post_date>
		<wp:post_date_gmt>2014-01-08 13:12:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nodejs-emberjs-es6-modules-and-ember-data</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ember"><![CDATA[ember]]></category>
		<category domain="post_tag" nicename="ember-data"><![CDATA[ember-data]]></category>
		<category domain="category" nicename="ember-data-2"><![CDATA[Ember-Data]]></category>
		<category domain="category" nicename="emberjs"><![CDATA[EmberJS]]></category>
		<category domain="category" nicename="es6"><![CDATA[ES6]]></category>
		<category domain="post_tag" nicename="es6-2"><![CDATA[es6]]></category>
		<category domain="category" nicename="nodejs"><![CDATA[NodeJS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_image_ids</wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_quote_quote</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_link_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_m4v</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_ogv</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_poster_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_embed_code</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_mp3</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_ogg</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_poster_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_title</wp:meta_key>
			<wp:meta_value><![CDATA[EmberJS, ES6 modules and Ember-Data]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_description</wp:meta_key>
			<wp:meta_value><![CDATA[Putting the ‘mailbox' example of the emberjs.com website on steroïds with Ember-Data and ES6 modules and query data from NodeJS]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[Ember, Ember js, EmberJS, ES6 modules, Ember modules, Ember-Data, ember data, express, ]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_robots_index</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_robots_follow</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[220]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>application-adapter</wp:meta_key>
			<wp:meta_value><![CDATA[var ApplicationAdapter = DS.RESTAdapter.extend({
    namespace: 'api'
});

export default ApplicationAdapter;]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>application-nodejs-routes</wp:meta_key>
			<wp:meta_value><![CDATA[module.exports = function(server) {

  // Create an API namespace, so that the root does not
  // have to be repeated for each end point.
  server.namespace('/api', function() {

    // Return fixture data for '/api/mailboxes'
    server.get('/mailboxes/', function(req, res) {
      var data = { ... }
      res.send(data);
    });

  });

};]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>application-fixtures-json</wp:meta_key>
			<wp:meta_value><![CDATA[{
  "name": "Inbox",
  "id": "inbox",
  "messages": [
    {
      "id": 1,
      "subject": "Welcome to Ember",
      "from": "email",
      "to": "email",
      "date": new Date(),
      "body": "Welcome to Ember. We hope you enjoy your stay"
    }, {
      "id": 2,
      "subject": "Great Ember Resources",
      "from": "email",
      "to": "email",
      "date": new Date(),
      "body": "Have you seen embercasts.co? How about emberaddons.co?"
    }
  ]
}, {
  "name": "Spam",
  "id": "spam",
  "messages": [
    {
      "id": 3,
      "subject": "You have one the lottery!!!111ONEONE",
      "from": "email",
      "to": "email",
      "date": new Date(),
      "body": "You have ONE the lottery! You only have to send us a small amount of monies to claim your prize"
    }
  ]
}, {
  "name": "Sent Mail",
  "id": "sent-mail",
  "messages": [
    {
      "id": 4,
      "subject": "Should I use Ember",
      "from": "email",
      "to": "email",
      "date": new Date(),
      "body": "Ember looks pretty good, should I use it?"
    }
  ]
}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>application-normalizing-messages</wp:meta_key>
			<wp:meta_value><![CDATA["messages": [{
  "id": 1,
  "subject": "Welcome to Ember",
  "from": "email",
  "to": "email",
  "date": new Date(),
  "body": "Welcome to Ember. We hope you enjoy your stay"
}, {
  "id": 2,
  "subject": "Great Ember Resources",
  "from": "email",
  "to": "email",
  "date": new Date(),
  "body": "Have you seen embercasts.com? How about emberaddons.com?"
}, {
  "id": 3,
  "subject": "You have one the lottery!!!111ONEONE",
  "from": "email",
  "to": "email",
  "date": new Date(),
  "body": "You have ONE the lottery! You only have to send us a small amount of monies to claim your prize"
}, {
  "id": 4,
  "subject": "Should I use Ember",
  "from": "email",
  "to": "email",
  "date": new Date(),
  "body": "Ember looks pretty good, should I use it?"
}]]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>application-normalizing-mailbox</wp:meta_key>
			<wp:meta_value><![CDATA["mailbox": [{
  "name": "Inbox",
  "id": "inbox",
  "messages": ["1", "2"]
}, {
  "name": "Spam",
  "id": "spam",
  "messages": ["3"]
}, {
  "name": "Sent Mail",
  "id": "sent-mail",
  "messages": ["4"]
}]]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>application-message-model</wp:meta_key>
			<wp:meta_value><![CDATA[var attr = DS.attr;

var Message = DS.Model.extend({
  number: attr(),
  subject: attr(),
  from: attr(),
  to: attr(),
  date: attr(),
  body: attr()
});

Message.idField = 'number';

export default Message;]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>application-mailbox-model</wp:meta_key>
			<wp:meta_value><![CDATA[var attr = DS.attr,
    hasMany = DS.hasMany;

var Mailbox = DS.Model.extend({
  number: attr(),
  name: attr(),
  messages: hasMany('message')
});

Mailbox.idField = 'number';

export default Mailbox;]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>application-route-model</wp:meta_key>
			<wp:meta_value><![CDATA[var ApplicationRoute = Em.Route.extend({
  model: function() {
    return this.store.find('mailbox');
  }
});

export default ApplicationRoute;]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>application-template</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="url">URL: {{target.url}}</div>
<aside>
    <ul>
        <li><h2>Mailboxes</h2></li>
        {{#each}}
            <li>
                {{#link-to "mailbox" this currentWhen="mailbox"}}
                    <span class="count">
                        {{messages.length}}
                    </span>
                    {{name}}
                {{/link-to}}
            </li>
        {{/each}}
    </ul>
</aside>

<section class="main">
    {{outlet}}
</section>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[2099997928]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[EmberJS, ES6 modules and Ember-Data | Ember.js ...]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.scoop.it/t/develop/p/4014061466/2014/01/13/emberjs-es6-modules-and-ember-data</wp:comment_author_url>
			<wp:comment_author_IP>89.30.105.121</wp:comment_author_IP>
			<wp:comment_date>2014-01-12 23:25:05</wp:comment_date>
			<wp:comment_date_gmt>2014-01-12 22:25:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Putting the &lsquo;mailbox&#039; example of the emberjs.com website on stero&iuml;ds with Ember-Data and ES6 modules and query data from NodeJS&nbsp; [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1389565505.7854691;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1389565985.2722459;s:7:"message";s:52:"thaumeSylvere changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:13:"thaumeSylvere";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>12</wp:comment_id>
			<wp:comment_author><![CDATA[jkneb]]></wp:comment_author>
			<wp:comment_author_email>julienknebel@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://front-back.com/</wp:comment_author_url>
			<wp:comment_author_IP>93.20.180.146</wp:comment_author_IP>
			<wp:comment_date>2014-01-13 10:51:00</wp:comment_date>
			<wp:comment_date_gmt>2014-01-13 09:51:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice. Thanks for sharing! :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1198211439]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>13</wp:comment_id>
			<wp:comment_author><![CDATA[Tom Coquereau]]></wp:comment_author>
			<wp:comment_author_email>tom@thau.me</wp:comment_author_email>
			<wp:comment_author_url>http://thau.me/</wp:comment_author_url>
			<wp:comment_author_IP>83.167.37.146</wp:comment_author_IP>
			<wp:comment_date>2014-01-13 12:03:00</wp:comment_date>
			<wp:comment_date_gmt>2014-01-13 11:03:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Always a pleasure to write about Ember, I'm glad you liked it ;)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>12</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1198211439]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1198247016]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>14</wp:comment_id>
			<wp:comment_author><![CDATA[EmberJS, ES6 modules and Ember-Data | JavaScrip...]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.scoop.it/t/javascript-for-line-of-business-applications/p/4014230918/2014/01/15/emberjs-es6-modules-and-ember-data</wp:comment_author_url>
			<wp:comment_author_IP>89.30.105.121</wp:comment_author_IP>
			<wp:comment_date>2014-01-15 16:07:19</wp:comment_date>
			<wp:comment_date_gmt>2014-01-15 15:07:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] In this blog post about EmberJS and Ember-Data, we&rsquo;ll use the example from the last blog post series (you can find it in this git repo on the branch master) and we&rsquo;ll plug in the RESTAdapter in order to get data from an Express server instead of using fixtures. Clone the git repo, and follow me !The Ember App Kit has a very useful little feature called &lsquo;API-stub&rsquo;, it let you create routes on Express and respond with data. We will use this API-stub to create our JSON that we want to send to our Ember app through Ember-Data, so let&rsquo;s configure our ApplicationAdapter.&nbsp; [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1389798439.9783771;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>tomster-under-construction</title>
		<link>http://thau.me/2014/01/nodejs-emberjs-es6-modules-and-ember-data/tomster-under-construction/</link>
		<pubDate>Wed, 08 Jan 2014 10:22:21 +0000</pubDate>
		<dc:creator><![CDATA[thaumeSylvere]]></dc:creator>
		<guid isPermaLink="false">http://thau.me/wp-content/uploads/2014/01/tomster-under-construction.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>220</wp:post_id>
		<wp:post_date>2014-01-08 11:22:21</wp:post_date>
		<wp:post_date_gmt>2014-01-08 10:22:21</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tomster-under-construction</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>217</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://thau.me/wp-content/uploads/2014/01/tomster-under-construction.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2014/01/tomster-under-construction.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:472;s:6:"height";i:529;s:4:"file";s:38:"2014/01/tomster-under-construction.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:38:"tomster-under-construction-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:38:"tomster-under-construction-267x300.png";s:5:"width";i:267;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:36:"tomster-under-construction-50x50.png";s:5:"width";i:50;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}s:18:"blog-index-gallery";a:4:{s:4:"file";s:38:"tomster-under-construction-472x435.png";s:5:"width";i:472;s:6:"height";i:435;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>NodeJS streaming files to Amazon S3</title>
		<link>http://thau.me/2014/02/nodejs-streaming-files-to-amazons3/</link>
		<pubDate>Wed, 12 Feb 2014 15:16:51 +0000</pubDate>
		<dc:creator><![CDATA[thaumeSylvere]]></dc:creator>
		<guid isPermaLink="false">http://thau.me/?p=260</guid>
		<description></description>
		<content:encoded><![CDATA[<span style="line-height: 1.5em;">In this blog post I want to take a look at a way to upload files directly to amazon S3 without having to create temporary files on the system. I will use </span><a style="line-height: 1.5em;" title="knox" href="https://github.com/LearnBoost/knox">knox</a><span style="line-height: 1.5em;"> (a nodejs client to upload objects to amazon S3) and </span><a style="line-height: 1.5em;" title="busboy" href="https://github.com/mscdex/busboy">busboy</a><span style="line-height: 1.5em;"> (a fast </span><span style="line-height: 1.5em;">streaming parser for HTML form data</span><span style="line-height: 1.5em;">)</span><span style="line-height: 1.5em;">. You will find the final code of this post in <a title="s3-streaming repo" href="https://github.com/thaume/s3-streaming">this github repo</a>.</span>

<a href="http://thau.me/wp-content/uploads/2014/02/5330473771_ed96f7e8da_z.jpg"><img class="aligncenter size-full wp-image-290" src="http://thau.me/wp-content/uploads/2014/02/5330473771_ed96f7e8da_z.jpg" alt="5330473771_ed96f7e8da_z" width="640" height="427" /></a>
<h2>Setting up the ExpressJS app</h2>
<h3>Installing dependencies</h3>
After creating your Express project you'll need to run these commands in your terminal to get all the modules and set up our file where we'll handle file upload (remember to run these commands from the root directory fo your newly created express app).

[prism key="s3-stream-console" language="javascript"]
<h3>Get our app to communicate with S3</h3>
First you'll need to set your S3 credentials in order for our app to be able to communicate with your S3 bucket. They belong in the config file, which is in `app/config/development.json` and looks like this:

[prism key="s3-stream-config" language="javascript"]

We'll use this config file later in our file handler function.
<h2>Setting up our route in Express</h2>
We will only need one route that will both handle the GET and POST request from our webview. This is just for the sake of making something simple, you shouldn't (in my opinion) use such a route for a production app. In `routes/index.js` we have:

[prism key="s3-stream-route" language="javascript"]

Our index route responds with an html form if the request is not a POST. If the request is a POST, it will first upload the file sent from the browser to S3 and then render a success message to the webview.
<h2>Parsing a form-data with Busboy</h2>
The app is now ready to send our file to S3. If you try to send a file right now, you will get nothing, even if you try to inspect the 'req.body' property (supposed to contain what was sent from the browser). That is because you need to parse the content sent from the browser, to do that we'll use Busboy which handles files upload.
<h3>Setting the Busboy middleware</h3>
In our `app.js` file, we set a couple of things: routes, middlewares, app variables and we also start the server from here. What's interesting to us right now is the middleware stack:

[prism key="s3-stream-middleware" language="javascript"]

In case you followed the '<a title="Do not use the bodyParse in express" href="http://andrewkelley.me/post/do-not-use-bodyparser-with-express-js.html">Do not use the bodyParse in express</a>' series of posts, the main difference with the bodyParse middleware is that Busboy will never write temporary files to the filesystem. The problem with writing files to the filesystem on every file upload is that you can overwhelm your server with useless temporary files. Busboy uses streams2 all the way and doesn't block your filesystem. The fact that it doesn't do I/O means better performances too.

Here we set busboy as a middleware ('busboy-connect') so that it handles every file upload that comes toward the server. It means that it will create streams for each file, you will be able to listen to this streams as you'll find later in this blog post.
<h3>Handling files</h3>
Now we need to get the file and send it to S3. Sounds easy since Busboy does handle the whole thing right?

Well, there's still a little work to be done: S3 needs a 'content-length' header to be set otherwise the upload will not complete. Streams by definition do not have 'content-length' or length. Which means we need to find the streams length before sending it over to S3. The strategy I use here is simple: buffer the stream to get its length.

[prism key="s3-stream-length" language="javascript"]

The resulting object (req.files[fieldname]) now features all the requirements of S3.
<h3>Unique filename</h3>
Before sending the file, let's imagine that we want to have a strategy to always have different file names (if you send two files with the same file name, S3 will erase the older one). With the following technique, you will always have different file names:

[prism key="s3-stream-randomname" language="javascript"]

We'll now save files in a month and a day folder, following this pattern: `/artwork/[MONTH]/[DAY]/[random-number]filename`. This might not sound so important, but you need to know that S3 is much more efficient when you create a hierarchy of files rather than just putting all files at the same level and if you want to scale a bit, you'll need random naming to avoid files erasing others.
<h3>Setting headers</h3>
We then need to fix the headers for the request to be valid for S3 ('x-amz-acl' makes the image readable by anyone with its URL, that's what you want to use for most images):

[prism key="s3-stream-headers" language="javascript"]

Once the headers are set, we have all the data and information needed to push our file to our S3 bucket.
<h3>Sending files to S3</h3>
To put our newly created Buffer to S3, we'll need to use Knox at the end of our `req.busboy.on('file')` callback (after the headers setup):

[prism key="s3-stream-putbuffer" language="javascript"]

Here we use the putBuffer method of Knox (<a title="putBuffer" href="https://github.com/LearnBoost/knox#put">https://github.com/LearnBoost/knox#put</a>) and we then call `next()` once S3 responds with a 200 status code and... voilà! Check your S3 bucket, your file should be there ready to be used!

You will find the final code of this post in <a title="s3-streaming repo" href="https://github.com/thaume/s3-streaming">this github repo</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[This blog post shows a technique to upload files directly to amazon S3 without having to create temporary files on the system.]]></excerpt:encoded>
		<wp:post_id>260</wp:post_id>
		<wp:post_date>2014-02-12 16:16:51</wp:post_date>
		<wp:post_date_gmt>2014-02-12 15:16:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nodejs-streaming-files-to-amazons3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="aws"><![CDATA[aws]]></category>
		<category domain="category" nicename="nodejs"><![CDATA[NodeJS]]></category>
		<category domain="post_tag" nicename="nodejs-2"><![CDATA[nodejs]]></category>
		<category domain="post_tag" nicename="s3"><![CDATA[S3]]></category>
		<category domain="post_tag" nicename="streams"><![CDATA[streams]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_image_ids</wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_quote_quote</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_link_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_m4v</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_ogv</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_poster_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_embed_code</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_mp3</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_ogg</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_poster_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_title</wp:meta_key>
			<wp:meta_value><![CDATA[NodeJS streaming files to Amazon S3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_description</wp:meta_key>
			<wp:meta_value><![CDATA[This blog post shows a technique to upload files directly to amazon S3 without having to create temporary files on the system.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[nodejs, aws, knox, streams, busboy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_robots_index</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_robots_follow</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>s3-stream-config</wp:meta_key>
			<wp:meta_value><![CDATA[{
  "aws": {
    "AWS_ACCESS_KEY_ID": "YOUR_AWS_ACCESS_KEY_ID",
    "AWS_SECRET_ACCESS_KEY": "YOUR_AWS_SECRET_ACCESS_KEY",
    "S3_BUCKET_NAME": "YOUR_S3_BUCKET_NAME"
  }
}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>s3-stream-route</wp:meta_key>
			<wp:meta_value><![CDATA[var awsUpload = require('../services/aws-streaming');

// Index route
// ===========
exports.index = function(req, res){
  if (req.method === 'POST') {
    return awsUpload(req, function(err, url) {
      res.end('<html><head></head><body>\
                 <h1>All good !</h1>\
              </body></html>');
    });
  }

  res.writeHead(200, { Connection: 'close' });
  res.end('<html><head></head><body>\
             <form method="POST" enctype="multipart/form-data">\
              <input type="file" name="filefield"><br />\
              <input type="submit">\
            </form>\
          </body></html>');
};]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>s3-stream-console</wp:meta_key>
			<wp:meta_value><![CDATA[$ npm install

$ npm install --save busboy // data form parser

$ npm install --save connect-busboy // busboy middleware

$ npm install --save knox // S3 client

$ mkdir /services/

$ touch /services/aws-streaming.js]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>s3-stream-middleware</wp:meta_key>
			<wp:meta_value><![CDATA[var busboy = require('connect-busboy');

...

app.use(busboy());
app.use(express.methodOverride());
app.use(app.router);]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>s3-stream-length</wp:meta_key>
			<wp:meta_value><![CDATA[req.busboy.on('file', function(fieldname, file, filename, encoding, mimetype) {
    if (!filename) {
      // If filename is not truthy it means there's no file
      return;
    }
    // Create the initial array containing the stream's chunks
    file.fileRead = [];

    file.on('data', function(chunk) {
      // Push chunks into the fileRead array
      this.fileRead.push(chunk);
    });

    file.on('error', function(err) {
      console.log('Error while buffering the stream: ', err);
    });

    file.on('end', function() {
      // Concat the chunks into a Buffer
      var finalBuffer = Buffer.concat(this.fileRead);

      req.files[fieldname] = {
        buffer: finalBuffer,
        size: finalBuffer.length,
        filename: filename,
        mimetype: mimetype
      };

    });
  });]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>s3-stream-randomname</wp:meta_key>
			<wp:meta_value><![CDATA[// Generate date based folder prefix
var datePrefix = moment().format('YYYY[/]MM');
var key = crypto.randomBytes(10).toString('hex');
var hashFilename = key + '-' + filename;

var pathToArtwork = '/artworks/' + datePrefix + '/' + hashFilename;]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>s3-stream-headers</wp:meta_key>
			<wp:meta_value><![CDATA[var headers = {
    'Content-Length': req.files[fieldname].size,
    'Content-Type': req.files[fieldname].mimetype,
    'x-amz-acl': 'public-read'
};]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>s3-stream-putbuffer</wp:meta_key>
			<wp:meta_value><![CDATA[Knox.aws.putBuffer( req.files[fieldname].buffer, pathToArtwork, headers, function(err, response){
  if (err) {
    console.error('error streaming image: ', new Date(), err);
    return next(err);
  }
  if (response.statusCode !== 200) {
    console.error('error streaming image: ', new Date(), err);
    return next(err);
  }
  console.log('Amazon response statusCode: ', response.statusCode);
  console.log('Your file was uploaded');
  next();
});]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[290]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[2908083894]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>_DSC0431 (1)</title>
		<link>http://thau.me/about/_dsc0431-1/</link>
		<pubDate>Tue, 04 Mar 2014 09:57:54 +0000</pubDate>
		<dc:creator><![CDATA[thaumeSylvere]]></dc:creator>
		<guid isPermaLink="false">http://thau.me/wp-content/uploads/2013/05/DSC0431-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>263</wp:post_id>
		<wp:post_date>2014-03-04 10:57:54</wp:post_date>
		<wp:post_date_gmt>2014-03-04 09:57:54</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>_dsc0431-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>16</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://thau.me/wp-content/uploads/2013/05/DSC0431-1.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/05/DSC0431-1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:652;s:6:"height";i:651;s:4:"file";s:21:"2013/05/DSC0431-1.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"DSC0431-1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:21:"DSC0431-1-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"DSC0431-1-50x50.jpg";s:5:"width";i:50;s:6:"height";i:50;s:9:"mime-type";s:10:"image/jpeg";}s:10:"blog-large";a:4:{s:4:"file";s:21:"DSC0431-1-580x579.jpg";s:5:"width";i:580;s:6:"height";i:579;s:9:"mime-type";s:10:"image/jpeg";}s:18:"blog-index-gallery";a:4:{s:4:"file";s:21:"DSC0431-1-580x435.jpg";s:5:"width";i:580;s:6:"height";i:435;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:12:"PIAULT  seba";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>5330473771_ed96f7e8da_z</title>
		<link>http://thau.me/2014/02/nodejs-streaming-files-to-amazons3/5330473771_ed96f7e8da_z/</link>
		<pubDate>Thu, 07 Aug 2014 14:31:57 +0000</pubDate>
		<dc:creator><![CDATA[thaumeSylvere]]></dc:creator>
		<guid isPermaLink="false">http://thau.me/wp-content/uploads/2014/02/5330473771_ed96f7e8da_z.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>290</wp:post_id>
		<wp:post_date>2014-08-07 16:31:57</wp:post_date>
		<wp:post_date_gmt>2014-08-07 14:31:57</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>5330473771_ed96f7e8da_z</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>260</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://thau.me/wp-content/uploads/2014/02/5330473771_ed96f7e8da_z.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2014/02/5330473771_ed96f7e8da_z.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:427;s:4:"file";s:35:"2014/02/5330473771_ed96f7e8da_z.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:35:"5330473771_ed96f7e8da_z-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:35:"5330473771_ed96f7e8da_z-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:33:"5330473771_ed96f7e8da_z-50x50.jpg";s:5:"width";i:50;s:6:"height";i:50;s:9:"mime-type";s:10:"image/jpeg";}s:10:"blog-large";a:4:{s:4:"file";s:35:"5330473771_ed96f7e8da_z-580x386.jpg";s:5:"width";i:580;s:6:"height";i:386;s:9:"mime-type";s:10:"image/jpeg";}s:18:"blog-index-gallery";a:4:{s:4:"file";s:35:"5330473771_ed96f7e8da_z-580x427.jpg";s:5:"width";i:580;s:6:"height";i:427;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Projects</title>
		<link>http://thau.me/projects/</link>
		<pubDate>Sat, 09 Aug 2014 12:06:32 +0000</pubDate>
		<dc:creator><![CDATA[thaumeSylvere]]></dc:creator>
		<guid isPermaLink="false">http://thau.me/?page_id=306</guid>
		<description></description>
		<content:encoded><![CDATA[My main project these days is <a href="http://www.paperchain.co">Paperchain</a>, I built it with a friend who is a designer. We created this project as a POC (proof of concept) to test our ability to create a full web project. We spent almost one year thinking about this project and created the whole thing within 3 months (from concept/wireframes to working Beta).

<a title="Paperchain" href="http://www.paperchain.co"><img class="aligncenter size-medium wp-image-307" src="http://thau.me/wp-content/uploads/2014/08/ref-04-paperchain-300x159.png" alt="ref-04-paperchain" width="300" height="159" /></a>

<h2>Technologies</h2>
We use NodeJS for our server-side code, with a PostgreSQL database to store our data. This stack works really well on Heroku, although we do not have 9000 requests per minute, we're not at all 'at scale'. The development process is really enjoyable.

The front-end is based on Backbone for now, but we are looking at Ember to push the website further and make it an hybrid application (able to work on iOS/Android/windows phone and web browser).

We also have a redis datastore running to store our sessions and a few cached object from the database; Amazon S3 is our cheap scalable image store and of course the whole application is versioned through Git on Github.

The deployment process is also really enjoyable, front-end and back-end tests run on our preproduction environment and the application is promoted to production once all tests are green. This give us a really smooth push-to-production process, add A/B testing to the sauce and you're never scared anymore to launch a feature at an early stage in production!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>306</wp:post_id>
		<wp:post_date>2014-08-09 14:06:32</wp:post_date>
		<wp:post_date_gmt>2014-08-09 12:06:32</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>projects</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_robots_index</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_robots_follow</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>ref-04-paperchain</title>
		<link>http://thau.me/projects/ref-04-paperchain/</link>
		<pubDate>Sat, 09 Aug 2014 11:40:15 +0000</pubDate>
		<dc:creator><![CDATA[thaumeSylvere]]></dc:creator>
		<guid isPermaLink="false">http://thau.me/wp-content/uploads/2014/08/ref-04-paperchain.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>307</wp:post_id>
		<wp:post_date>2014-08-09 13:40:15</wp:post_date>
		<wp:post_date_gmt>2014-08-09 11:40:15</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ref-04-paperchain</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>306</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://thau.me/wp-content/uploads/2014/08/ref-04-paperchain.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2014/08/ref-04-paperchain.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:500;s:6:"height";i:266;s:4:"file";s:29:"2014/08/ref-04-paperchain.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"ref-04-paperchain-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"ref-04-paperchain-300x159.png";s:5:"width";i:300;s:6:"height";i:159;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:27:"ref-04-paperchain-50x50.png";s:5:"width";i:50;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title></title>
		<link>http://thau.me/2014/08/309/</link>
		<pubDate>Sat, 09 Aug 2014 12:07:15 +0000</pubDate>
		<dc:creator><![CDATA[thaumeSylvere]]></dc:creator>
		<guid isPermaLink="false">http://thau.me/?p=309</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>309</wp:post_id>
		<wp:post_date>2014-08-09 14:07:15</wp:post_date>
		<wp:post_date_gmt>2014-08-09 12:07:15</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>309</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="main"><![CDATA[main]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[306]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Emberjs test with mocha and ES6 modules</title>
		<link>http://thau.me/2014/02/emberjs-test-with-mocha-and-es6-modules/</link>
		<pubDate>Thu, 06 Feb 2014 17:55:17 +0000</pubDate>
		<dc:creator><![CDATA[thaumeSylvere]]></dc:creator>
		<guid isPermaLink="false">http://thau.me/?p=258</guid>
		<description></description>
		<content:encoded><![CDATA[I always wanted to use mocha to test my Emberjs applications since I do testing on the NodeJS back-end with it. I had a bunch of problems setting everything up so I wanted to share what I found and know what everybody thinks. I will be using the following librairies:
<ul>
	<li>SinonJS: mocks/stubs/spy</li>
	<li>Chaï: assertion (will use expect style in this article)</li>
	<li>Mocha: test framework</li>
	<li>testem: test runner</li>
</ul>
<h2>Setting everything up</h2>
First, we need to rework the app/index.html file in order to insert all the librairies I mentioned above. It looks like this]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>258</wp:post_id>
		<wp:post_date>2014-02-06 18:55:17</wp:post_date>
		<wp:post_date_gmt>2014-02-06 17:55:17</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>emberjs-test-with-mocha-and-es6-modules</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_image_ids</wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_quote_quote</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_link_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_m4v</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_ogv</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_poster_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_embed_code</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_mp3</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_ogg</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_poster_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_robots_index</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_robots_follow</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[draft]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1407415963]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>My EmberJS-Paris talk - march 13th 2014</title>
		<link>http://thau.me/2014/03/emberjs-paris-talk-march-13th-2014/</link>
		<pubDate>Fri, 14 Mar 2014 09:37:06 +0000</pubDate>
		<dc:creator><![CDATA[thaumeSylvere]]></dc:creator>
		<guid isPermaLink="false">http://thau.me/?p=275</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>275</wp:post_id>
		<wp:post_date>2014-03-14 10:37:06</wp:post_date>
		<wp:post_date_gmt>2014-03-14 09:37:06</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>emberjs-paris-talk-march-13th-2014</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_format" nicename="post-format-link"><![CDATA[Link]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_image_ids</wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_quote_quote</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_link_url</wp:meta_key>
			<wp:meta_value><![CDATA[http://thau.me/emberjs-paris-13-03-2014]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_m4v</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_ogv</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_poster_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_video_embed_code</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_mp3</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_ogg</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_poster_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_audio_height</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_robots_index</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_zilla_seo_robots_follow</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
